import streamlit as st
from PIL import Image
import torch
from transformers import BlipProcessor, BlipForConditionalGeneration

# Set Streamlit page config
st.set_page_config(page_title="Image Captioning with BLIP", layout="centered")

# Title
st.title("üñºÔ∏è Image Captioning using BLIP")
st.write("Upload an image and get a caption generated by the BLIP model.")

# Cache model loading to avoid reloading every time
@st.cache_resource
def load_model():
    processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
    model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")
    model.eval()
    return processor, model

processor, model = load_model()

# File uploader
uploaded_file = st.file_uploader("Upload an image", type=["jpg", "png", "jpeg"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="Uploaded Image", use_column_width=True)

    if st.button("Generate Caption"):
        with st.spinner("Generating caption..."):
            inputs = processor(images=image, return_tensors="pt")
            with torch.no_grad():
                out = model.generate(**inputs)
            caption = processor.decode(out[0], skip_special_tokens=True)
        st.success(f"üìå **Caption**: {caption}")
